@page "/"
@attribute [Authorize]

@using Chinook.Models
@using Microsoft.EntityFrameworkCore

<PageTitle>Index</PageTitle>

<h1>Artists</h1>
<input type="text" class="form-control" placeholder="Search" @oninput="SearchArtist" />
@if (Artists == null)
{
    <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                @* Show Columns Favourites and Playlist *@
                <th>Favourites</th>
                <th>Playlist</th>
                @* End *@
                <th>Number of albums</th>
                
            </tr>
        </thead>
        <tbody>
            <!-- Loop through artists, filtering by name containing the search term (case-insensitive) -->
            @foreach (var artist in Artists.Where(a => a.Name.ToLower().Contains((SearchTerm ?? "").ToLower())))

            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <!-- Show links to Favourites and Playlist -->
                    <td><a href="Favourites/@artist.ArtistId">Favourites</a></td>
                    <td><a href="Playlist/@artist.ArtistId">Playlist</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string SearchTerm { get; set; }
    private List<Artist> Artists;
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }

    private async Task SearchArtist(ChangeEventArgs e)
    {
        SearchTerm = e.Value.ToString();
        // Add any additional logic here, such as triggering the search function
    }

    protected override async Task OnInitializedAsync() {
        await InvokeAsync(StateHasChanged);
        Artists = await GetArtists();
    }

    public async Task<List<Artist>> GetArtists()
    {   
        var dbContext = await DbFactory.CreateDbContextAsync();
        var users = dbContext.Artists.Include(a => a.Albums).ToList();

        return dbContext.Artists.ToList();
    }

    public async Task<List<Album>> GetAlbumsForArtist(int artistId)
    {
        var dbContext = await DbFactory.CreateDbContextAsync();
        return dbContext.Albums.Where(a => a.ArtistId == artistId).ToList();
    }

    public async Task<List<Artist>> SearchArtists(string searchTerm)
    {
        var dbContext = await DbFactory.CreateDbContextAsync();

        // Filter artists by name containing the search term in a case-insensitive manner
        var matchingArtists = dbContext.Artists
            .Where(a => a.Name.ToLower().Contains(searchTerm.ToLower()))
            .ToList();

        return matchingArtists;
    }


}

@page "/favourites/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.ClientModels
@using Microsoft.Data.Sqlite
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

<style>
    .star-filled {
        color: gold; /* Change the color to your preferred color */
    }
</style>
@if (Artist == null)
    {
    <Loading />
    }
else
    {
    <h1>@Artist.Name</h1>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Album title</th>
                <th>Track name</th>
                @* <th></th> *@
            </tr>
        </thead>
        <tbody>
            @foreach (var track in Tracks)
                {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                </tr>
                }
        </tbody>
    </table>
    }

@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }
    [Inject] ChinookContext _context { get; set; }

    private Artist Artist;
    private List<ClientModels.TrackPlaylist> Tracks;
    private DbContext DbContext;
    private string CurrentUserId;

    protected override async Task OnInitializedAsync()
        {
        await InvokeAsync(StateHasChanged);
        CurrentUserId = await GetUserId();
        // Get db context
        var DbContext = await DbFactory.CreateDbContextAsync();
        // get the artist details using artist Id
        Artist = DbContext.Artists.SingleOrDefault(a => a.ArtistId == ArtistId);
        // Get the list of tracks for that user and which are in Favourites
        var tracks = (from up in DbContext.UserPlaylists
                      join pt in DbContext.PlaylistTracks on up.PlaylistId equals pt.PlaylistId
                      join t in DbContext.Tracks on pt.TrackId equals t.TrackId
                      join a in DbContext.Albums on t.AlbumId equals a.AlbumId
                      where up.UserId == CurrentUserId
                      && a.ArtistId == Artist.ArtistId && up.Playlist.Name == Constants.DEFAULT_PLAYLIST
                      select new TrackPlaylist
                              {
                              PlaylistName = up.Playlist.Name,
                              TrackName = t.Name,
                              TrackId = t.TrackId,
                              AlbumTitle = a.Title,
                              ArtistName = a.Artist.Name
                              }).Distinct();

        Tracks = tracks.ToList();
        }
    /// <summary>
    /// To get the User details using userId
    /// </summary>
    /// <returns></returns>
    private async Task<string> GetUserId()
        {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
        }

}

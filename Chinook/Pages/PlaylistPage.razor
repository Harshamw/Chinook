@page "/playlist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.ClientModels
@using Chinook.Models
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

@* <h1>Playlist <strong>@Playlist.Name</strong></h1> *@

@if (!string.IsNullOrWhiteSpace(InfoMessage))
    {
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
    }

@if (Tracks == null)
    {
    <Loading />
    }
else
    {
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Playlist</th>
                <th>Track</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in Tracks)
                {
                <tr>
                    <td>@track.PlaylistName</td>
                    <td>@track.ArtistName - @track.AlbumTitle - @track.TrackName</td>
                </tr>
                }
        </tbody>
    </table>
    }

@code {
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }

    private Chinook.ClientModels.Playlist Playlist;
    private string CurrentUserId;
    private string InfoMessage;

    // Artist id is required to get the tracks of that artist
    [Parameter] public long ArtistId { get; set; }
    // To get the artist details
    private Artist Artist;
    // To get list of tracks
    private List<ClientModels.TrackPlaylist> Tracks;

    protected override async Task OnInitializedAsync()
        {
        CurrentUserId = await GetUserId();

        await InvokeAsync(StateHasChanged);

        // Get db context
        var DbContext = await DbFactory.CreateDbContextAsync();
        // get the artist details using artist Id
        Artist = DbContext.Artists.SingleOrDefault(a => a.ArtistId == ArtistId);
        // Get the list of tracks for that user and which are not in Favourites
        var tracks = (from up in DbContext.UserPlaylists
                      join pt in DbContext.PlaylistTracks on up.PlaylistId equals pt.PlaylistId
                      join t in DbContext.Tracks on pt.TrackId equals t.TrackId
                      join a in DbContext.Albums on t.AlbumId equals a.AlbumId
                      where up.UserId == CurrentUserId
                      && a.ArtistId == Artist.ArtistId && up.Playlist.Name != Constants.DEFAULT_PLAYLIST
                      select new TrackPlaylist
                          {
                          PlaylistName = up.Playlist.Name,
                          TrackName = t.Name,
                          TrackId=t.TrackId,
                          AlbumTitle=a.Title,
                          ArtistName=a.Artist.Name
                          }).Distinct();
        // add list in tracks
        Tracks = tracks.ToList();

        }

    private async Task<string> GetUserId()
        {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
        }

    private void CloseInfoMessage()
        {
        InfoMessage = "";
        }

}
